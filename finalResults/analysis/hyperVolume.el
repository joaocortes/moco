(defun joc-clean-solver-output (file)
  (setq file-clean (concat (file-name-sans-extension (expand-file-name file)) "_clean.txt"))
  (save-excursion
    (with-temp-file file-clean
      (print (current-buffer))
      (insert-file-contents file)
      (while (not (equalp (point) (point-max)))
	(move-beginning-of-line nil)
	(mark-sexp 4 t)
	(exchange-point-and-mark)
	(backward-char)
	(delete-region (point) (mark))
	(deactivate-mark)
	(next-line)
	(move-end-of-line nil))
      ))
  (file-exists-p file-clean)
  )

(defun joc-moco-calculate-hypervolumes-SC () 
  (with-temp-file "./hyperVolume.txt"
    (dolist (solver-file (cl-remove-if (lambda (string) (string-match "clean" string))
				       (directory-files "../finalResultsSC/run1/output/" t "^solver*")))
      ;; (joc-clean-solver-output solver-file)
      (let (instance-file solver-file-clean hyper-volume)
	(string-match "\\(bp.*SC\\)" solver-file)
	(setq instance-file (match-string 1 solver-file))
	(setq instance-file (concat "../finalResultsSC/run1/instances/" instance-file ".pbmo"))  
	(setq solver-file-clean (concat (file-name-sans-extension (expand-file-name solver-file)) "_clean.txt"))
	(shell-command (concat " java -cp ../../target/org.sat4j.moco.threeAlgorithms-0.0.1-SNAPSHOT-jar-with-dependencies.jar org.sat4j.moco.analysis.Analyzer " instance-file " 1:" solver-file-clean " > /tmp/hyperVolume.txt"))
	(condition-case	 nil
	    (progn (with-temp-buffer
		     (insert-file-contents "/tmp/hyperVolume.txt")
		     (re-search-forward ":values \\[\\(.*\\)\\] :min")
		     (setq hyper-volume (match-string 1))))
	  (error (setq hyper-volume "0.0") nil))
	(let (id alg)
	  (string-match "\\([0-9]*\\)-SC_S\\(.\\)" solver-file)
	  (setq id (match-string 1 solver-file))
	  (setq alg (match-string 2 solver-file))
	  (insert (concat id ", " alg  ", " hyper-volume "\n"))
	  (forward-line))
	))))

(defun joc-moco-calculate-hypervolumes () 
  (interactive)
  (with-temp-file "./hyperVolume.txt"
    (dolist (output     (cl-remove-if-not #'file-directory-p (directory-files-recursively "../" "output$" t)))
      (dolist (solver-file (cl-remove-if (lambda (string) (string-match "clean" string))
					 (directory-files output t "^solver*")))
	;; (joc-clean-solver-output solver-file)
	(message (concat "working on " solver-file ))
	(let (instance-file solver-file-clean hyper-volume)
	  (string-match "solver_\\(.*\\)_S[0-2]\\\.txt" solver-file)
	  (setq instance-file (match-string 1 solver-file))
	  (setq instance-file (concat output "/../instances/" instance-file ".pbmo"))  
	  (setq solver-file-clean (concat (file-name-sans-extension (expand-file-name solver-file)) "_clean.txt"))
	  ;; (shell-command (concat " java -cp ../../target/org.sat4j.moco.threeAlgorithms-0.0.1-SNAPSHOT-jar-with-dependencies.jar org.sat4j.moco.analysis.Analyzer " instance-file " 1:" solver-file-clean " > /tmp/hyperVolume.txt"))

	  (delete-file solver-file-clean)
	  (message "completede the computation!")
	  ;; (condition-case	 nil
	  ;;     (progn (with-temp-buffer
	  ;; 	       (insert-file-contents "/tmp/hyperVolume.txt")
	  ;; 	       (re-search-forward ":values \\[\\(.*\\)\\] :min")
	  ;; 	       (setq hyper-volume (match-string 1))))
	  ;;   (error (setq hyper-volume "0.0") nil))
	  ;; (let (id alg)
	  ;;   (string-match "\\([0-9]*\\)-SC_S\\(.\\)" solver-file)
	  ;;   (setq id (match-string 1 solver-file))
	  ;;   (setq alg (match-string 2 solver-file))
	  ;;   (insert (concat id ", " alg  ", " hyper-volume "\n"))
	  ;;   (forward-line))
	  )))))

Debugger entered: nil
  edebug--display-1(nil 0 before)
  edebug--display(nil 0 before)
  edebug-debugger(0 before nil)
  edebug-before(0)
  (edebug-after (edebug-before 0) 1 (if company-coq-debug (progn (message (concat "company-coq: " "company-coq-meta-refman: Called for name %s") name))))
  (closure ((name . #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) t) nil (edebug-after (edebug-before 0) 1 (if company-coq-debug (progn (message (concat "company-coq: " "company-coq-meta-refman: Called for name %s") name)))) (edebug-after (edebug-before 2) 8 (and (edebug-after (edebug-before 3) 5 (company-coq-get-prop 'anchor (edebug-after 0 4 name))) (edebug-after (edebug-before 6) 7 (substitute-command-keys "\\<company-active-map>\\[company-show-doc-buffer]: Show the documentation of this Coq command.")))))()
  edebug-enter(company-coq-meta-refman (#("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) (closure ((name . #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) t) nil (edebug-after (edebug-before 0) 1 (if company-coq-debug (progn (message (concat "company-coq: " "company-coq-meta-refman: Called for name %s") name)))) (edebug-after (edebug-before 2) 8 (and (edebug-after (edebug-before 3) 5 (company-coq-get-prop 'anchor (edebug-after 0 4 name))) (edebug-after (edebug-before 6) 7 (substitute-command-keys "\\<company-active-map>\\[company-show-doc-buffer]: Show the documentation of this Coq command."))))))
  edebug-enter(company-coq-meta-refman (#("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) (closure ((name . #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) t) nil (edebug-after (edebug-before 0) 1 (if company-coq-debug (progn (message (concat "company-coq: " "company-coq-meta-refman: Called for name %s") name)))) (edebug-after (edebug-before 2) 8 (and (edebug-after (edebug-before 3) 5 (company-coq-get-prop 'anchor (edebug-after 0 4 name))) (edebug-after (edebug-before 6) 7 (substitute-command-keys "\\<company-active-map>\\[company-show-doc-buffer]: Show the documentation of this Coq command."))))))
  company-coq-meta-refman(#("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  company-coq-generic-refman-backend(company-coq--init-refman-vernac-abbrevs-cache company-coq-refman-vernac-abbrevs-backend meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)) nil)
  company-coq-refman-vernac-abbrevs-backend(meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  company-coq-delegate-to-backend(meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  company-coq-master-backend(meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  apply(company-coq-master-backend (meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))))
  company-call-backend-raw(meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  apply(company-call-backend-raw (meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))))
  company--force-sync(company-call-backend-raw (meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend))) company-coq-master-backend)
  company-call-backend(meta #("Abort." 0 6 (match-end 4 match-beginning 0 source man anchor ("5x" . 335) insert "Abort." num-holes 0 company-coq-original-backend company-coq-refman-vernac-abbrevs-backend)))
  company-fetch-metadata()
  company-echo-show(company-fetch-metadata)
  apply(company-echo-show company-fetch-metadata)
  timer-event-handler([t 0 0 10000 nil company-echo-show (company-fetch-metadata) idle 0])
g